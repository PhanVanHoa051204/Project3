/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.100
 * Generated at: 2025-03-14 14:09:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.TietKiem;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.financemanager.dao.UserDao;
import com.financemanager.model.User;
import com.financemanager.dao.CategoryDAO;
import com.financemanager.model.Category;
import java.util.*;

public final class addGoal_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(6);
    _jspx_imports_classes.add("com.financemanager.model.Category");
    _jspx_imports_classes.add("com.financemanager.dao.CategoryDAO");
    _jspx_imports_classes.add("com.financemanager.dao.UserDao");
    _jspx_imports_classes.add("com.financemanager.model.User");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Thêm mục tiêu tài chính</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"container\">\r\n");
      out.write("    <h2 class=\"mt-4\">Thêm mục tiêu tài chính mới</h2>\r\n");
      out.write("\r\n");
      out.write("    ");
 
        String role = (String) session.getAttribute("role");
        if (role == null || !"admin".equals(role)) {
            response.sendRedirect("users.jsp");
            return;
        }
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <!-- Hiển thị thông báo lỗi nếu có -->\r\n");
      out.write("    ");
 
        String error = request.getParameter("error");
        if ("invalid_input".equals(error)) { 
      out.write("\r\n");
      out.write("            <div class=\"alert alert-danger mt-3\" role=\"alert\">\r\n");
      out.write("                Dữ liệu nhập không hợp lệ. Vui lòng kiểm tra lại!\r\n");
      out.write("            </div>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <!-- Form để thêm mục tiêu -->\r\n");
      out.write("    <form action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/goals\" method=\"post\">\r\n");
      out.write("        <input type=\"hidden\" name=\"action\" value=\"add\">\r\n");
      out.write("        <input type=\"hidden\" name=\"goal_id\" value=\"0\"> <!-- Giá trị mặc định, tự sinh bởi database -->\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-group\">\r\n");
      out.write("            <label for=\"user_id\">User ID:</label>\r\n");
      out.write("            <select id=\"user_id\" name=\"user_id\" class=\"form-control\" required>\r\n");
      out.write("                <option value=\"\" disabled selected>Chọn User ID</option>\r\n");
      out.write("                ");

                    List<User> listUser = UserDao.getAllUsers();
                    if (listUser != null && !listUser.isEmpty()) {
                        for (User user : listUser) {
                
      out.write("\r\n");
      out.write("                            <option value=\"");
      out.print( user.getUserId() );
      out.write('"');
      out.write('>');
      out.print( user.getUserId() );
      out.write(' ');
      out.write('-');
      out.write(' ');
      out.print( user.getUsername() );
      out.write("</option>\r\n");
      out.write("                ");
 
                        }
                    } else {
                        out.println("<option value='' disabled>No users available</option>");
                    }
                
      out.write("\r\n");
      out.write("            </select>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-group\">\r\n");
      out.write("            <label for=\"goal_name\">Tên mục tiêu:</label>\r\n");
      out.write("            <input type=\"text\" class=\"form-control\" id=\"goal_name\" name=\"goal_name\" required>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-group\">\r\n");
      out.write("            <label for=\"target_amount\">Số tiền mục tiêu:</label>\r\n");
      out.write("            <input type=\"number\" step=\"0.01\" min=\"0\" class=\"form-control\" id=\"target_amount\" name=\"target_amount\" required>\r\n");
      out.write("            <small class=\"form-text text-muted\">Nhập số tiền lớn hơn hoặc bằng 0.</small>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-group\">\r\n");
      out.write("            <label for=\"current_amount\">Số tiền hiện tại:</label>\r\n");
      out.write("            <input type=\"number\" step=\"0.01\" min=\"0\" class=\"form-control\" id=\"current_amount\" name=\"current_amount\" required>\r\n");
      out.write("            <small class=\"form-text text-muted\">Nhập số tiền hiện tại bạn đã có.</small>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-group\">\r\n");
      out.write("            <label for=\"target_date\">Ngày hoàn thành mục tiêu (YYYY-MM-DD):</label>\r\n");
      out.write("            <input type=\"date\" class=\"form-control\" id=\"target_date\" name=\"target_date\" required>\r\n");
      out.write("            <small class=\"form-text text-muted\">Chọn ngày hoàn thành mục tiêu theo định dạng YYYY-MM-DD.</small>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <button type=\"submit\" class=\"btn btn-primary\">Thêm</button>\r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("    <!-- Nút quay lại -->\r\n");
      out.write("    <a href=\"goals.jsp\" class=\"btn btn-secondary mt-3\">Quay lại</a>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
