package com.financemanager.controller;

import java.io.IOException;
import java.sql.Date;
import java.sql.SQLException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.financemanager.dao.TransactionDAO;
import com.financemanager.model.Transaction;

/**
 * Servlet implementation class TransactionServlet
 */
@WebServlet("/transactions")
public class TransactionServlet extends HttpServlet {
	private TransactionDAO transactionDAO;

	@Override
	public void init() throws ServletException {
		try {
			transactionDAO = new TransactionDAO();
		} catch (SQLException e) {
			throw new ServletException("Error initializing TransactionDAO", e);
		}
	}

	// Xử lý GET: Hiển thị danh sách hoặc xóa giao dịch
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String action = request.getParameter("action");

		if ("delete".equals(action)) {
			try {
				int transactionId = Integer.parseInt(request.getParameter("transaction_id"));
				boolean isDeleted = transactionDAO.deleteTransaction(transactionId);
				if (isDeleted) {
					request.getRequestDispatcher("/Project3/GiaoDich/transactions.jsp").forward(request, response);
				} else {
					request.getRequestDispatcher("/Project3/GiaoDich/transactions.jsp").forward(request, response);
				}
			} catch (NumberFormatException e) {
				request.getRequestDispatcher("/Project3/GiaoDich/transactions.jsp").forward(request, response);
			}
		} else {
			// Hiển thị danh sách giao dịch
			List<Transaction> transactions = transactionDAO.getAllTransactions();
			request.setAttribute("transactions", transactions);
			request.getRequestDispatcher("/Project3/GiaoDich/transactions.jsp").forward(request, response);
		}
	}

	// Xử lý POST: Thêm hoặc cập nhật giao dịch
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String action = request.getParameter("action");
		if (action == null) {
			request.getRequestDispatcher("/Project3/GiaoDich/error.jsp").forward(request, response);
			return;
		}

		try {
			int userId = Integer.parseInt(request.getParameter("user_id"));
			int categoryId = Integer.parseInt(request.getParameter("category_id"));
			Double amount = Double.parseDouble(request.getParameter("amount"));
			String description = request.getParameter("description");
			Date transactionDate = Date.valueOf(request.getParameter("transaction_date"));
			Date createdAt = Date.valueOf(request.getParameter("createdAt_date"));
			int transactionId = Integer.parseInt(request.getParameter("transaction_id"));

			Transaction transaction = new Transaction(transactionId, userId, categoryId, amount, description,
					transactionDate, createdAt);

			if ("add".equals(action)) {
				boolean isAdded = transactionDAO.addTransaction(transaction);
				if (isAdded) {
					request.getRequestDispatcher("/Project3/GiaoDich/transactions.jsp").forward(request, response);
				} else {
					request.getRequestDispatcher("/Project3/GiaoDich/transactions.jsp").forward(request, response);
				}
			} else if ("update".equals(action)) {
				boolean isUpdated = transactionDAO.updateTransaction(transaction);
				if (isUpdated) {
					request.getRequestDispatcher("/Project3/GiaoDich/transactions.jsp").forward(request, response);
				} else {
					request.getRequestDispatcher("/Project3/GiaoDich/transactions.jsp").forward(request, response);
				}
			} else {
				request.getRequestDispatcher("/Project3/GiaoDich/transactions.jsp").forward(request, response);
			}
		} catch (NumberFormatException e) {
			request.getRequestDispatcher("/Project3/GiaoDich/transactions.jsp").forward(request, response);
		}
	}
}